import { graphql } from 'react-apollo'
import { <%= queryName %>Query as IResponse } from '../../../operation-result-types'
import <%= queryName %> from '../queries/<%= queryFileName %>';
import * as R from 'ramda';

export interface I<%= entityName %> {
  <%_ for (var i = 0; i < props.length; i++) { -%>
  <%_ var prop = props[i], key = prop.typescript.key, value = prop.typescript.value -%>
  <%= key %>: <%= value -%>;
  <%_} -%>
}

export interface IWith<%= interfaceName %>Props {
  id: string;
}
export interface IWith<%= interfaceName %>WrappedProps {
  <%= dataNamespace %>: I<%= entityName %>,
}

export default graphql<IResponse, IWith<%= interfaceName %>Props, IWith<%= interfaceName %>WrappedProps>(<%= queryName %>, {
  options: ({ id }) => ({
    variables: {
      id,
    },
  }),
  props: (props) => ({
    ...props,
    <%= dataNamespace %>: R.pathOr(null, <%- JSON.stringify(pathToEntity).replace(/"/g, '\'') %>, props.data),
  }),
})
